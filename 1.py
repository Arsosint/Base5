import telebot
import sqlite3
from datetime import datetime, timedelta

API_TOKEN = '8105252956:AAHZr5AgjBDyIYh1MVkJ15hk-FZjJRKGSBM'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot(API_TOKEN)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users
                  (user_id INTEGER PRIMARY KEY, username TEXT, rank TEXT DEFAULT '–ù–µ—Ç—É –≤ –±–∞–∑–µ', mute_until DATETIME, ban_until DATETIME, 
                   slitoscammerov INTEGER DEFAULT 0, iskalivbase INTEGER DEFAULT 0, zaiavki INTEGER DEFAULT 0, evidence TEXT DEFAULT '')''')
conn.commit()

owner_id = 6321157988
owner_rank = '–í–ª–∞–¥–µ–ª–µ—Ü'  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–Ω–≥ –≤–ª–∞–¥–µ–ª—å—Ü–∞

def user_exists(user_id):
    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    return cursor.fetchone() is not None

def add_user(user_id, username, rank='–ù–µ—Ç—É –≤ –±–∞–∑–µ'):
    cursor.execute("INSERT INTO users (user_id, username, rank) VALUES (?, ?, ?)", (user_id, username, rank))
    conn.commit()

def get_user_id_by_username(username):
    cursor.execute("SELECT user_id FROM users WHERE username=?", (username,))
    result = cursor.fetchone()
    return result[0] if result else None

def set_mute(user_id, duration):
    mute_until = datetime.now() + timedelta(minutes=duration)
    cursor.execute("UPDATE users SET mute_until=? WHERE user_id=?", (mute_until, user_id))
    conn.commit()

def remove_mute(user_id):
    cursor.execute("UPDATE users SET mute_until=NULL WHERE user_id=?", (user_id,))
    conn.commit()

def set_ban(user_id, duration):
    ban_until = datetime.now() + timedelta(minutes=duration)
    cursor.execute("UPDATE users SET ban_until=? WHERE user_id=?", (ban_until, user_id))
    conn.commit()

def remove_ban(user_id):
    cursor.execute("UPDATE users SET ban_until=NULL WHERE user_id=?", (user_id,))
    conn.commit()

def delete_messages(chat_id, user_id, count):
    messages = bot.get_chat_history(chat_id, limit=count)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
    for message in messages:
        if message.from_user.id == user_id:
            bot.delete_message(chat_id, message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

def add_scammer(user_id, rank, reason, evidence):
    cursor.execute("UPDATE users SET rank=?, slitoscammerov=slitoscammerov+1, zaiavki=zaiavki+1, evidence=? WHERE user_id=?", (rank, evidence, user_id))
    cursor.execute("UPDATE users SET evidence = evidence || ? WHERE user_id=?", (f", {evidence}", user_id))
    conn.commit()

def remove_scammer(user_id):
    cursor.execute("UPDATE users SET rank='–ù–µ—Ç—É –≤ –±–∞–∑–µ' WHERE user_id=?", (user_id,))
    conn.commit()

def set_rank(user_id, new_rank):
    cursor.execute("UPDATE users SET rank=? WHERE user_id=?", (new_rank, user_id))
    conn.commit()

def remove_rank(user_id):
    cursor.execute("UPDATE users SET rank='–ù–µ—Ç—É –≤ –±–∞–∑–µ' WHERE user_id=?", (user_id,))
    conn.commit()

def increment_search_count(user_id):
    cursor.execute("UPDATE users SET iskalivbase=iskalivbase+1 WHERE user_id=?", (user_id,))
    conn.commit()

@bot.message_handler(commands=['start'])
def start_handler(message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ—Ç—É –≤ –±–∞–∑–µ"
    if not user_exists(user_id):
        add_user(user_id, username)

def get_user_data(identifier):
    user_id = None
    if identifier.isdigit():
        user_id = int(identifier)
    else:
        user_id = get_user_id_by_username(identifier)

    if user_id:
        if user_exists(user_id):
            cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
            return cursor.fetchone()
        else:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        print(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {identifier}")

    return None

@bot.message_handler(commands=['—á–µ–∫'])
def check_handler(message):
    parts = message.text.split()
    if len(parts) != 2:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /—á–µ–∫ (id –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º)")
        return
    user_data = get_user_data(parts[1])
    if user_data:
        user_id, username, rank, mute_until, ban_until, slitoscammerov, iskalivbase, zaiavki, evidence = user_data
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞
        increment_search_count(user_id)

        # –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        chance_of_scam = 0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if rank in ['–ê–¥–º–∏–Ω', '–í–ª–∞–¥–µ–ª–µ—Ü', '–î–∏—Ä–µ–∫—Ç–æ—Ä']:
            photo_url = 'https://imageup.ru/img58/4957060/1000006422.jpg'
        elif rank == '–ì–∞—Ä–∞–Ω—Ç':
            photo_url = 'https://imageup.ru/img58/4957061/1000006419.jpg'
        elif rank == '–í–æ–∑–º–æ–∂–Ω–æ —Å–∫–∞–º–º–µ—Ä':
            chance_of_scam = 60
            photo_url = 'https://imageup.ru/img181/4957063/1000006420.jpg'
        elif rank == '–°–∫–∞–º–º–µ—Ä':
            chance_of_scam = 99
            photo_url = 'https://imageup.ru/img2/4957062/1000006417.jpg'
        elif rank == '–í–æ–ª–æ–Ω—Ç—ë—Ä':
            chance_of_scam = 10
            photo_url = 'https://imageup.ru/img274/4957067/1000006523.jpg'
        elif rank == '–°—Ç–∞–∂—ë—Ä':
            chance_of_scam = 20
            photo_url = 'https://imageup.ru/img263/4957066/1000006522.jpg'
        elif rank == '–ü—Ä–æ–≤–µ—Ä–µ–Ω –≥–∞—Ä–∞–Ω—Ç–æ–º':
            chance_of_scam = 23
            photo_url = 'https://imageup.ru/img233/4957059/1000006425.jpg'
        else:
            chance_of_scam = 38
            photo_url = 'https://imageup.ru/img53/4957058/1000006423.jpg'

        bot.send_photo(chat_id=message.chat.id, photo=photo_url,
                       caption=f"""
–í—ã–≤–æ–∂—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
üÜî Id: {user_id}
üë§ –Æ–∑–µ—Ä–Ω–µ–π–º: {username}
üîÅ –†–µ–ø—É—Ç–∞—Ü–∏—è: {rank}
üõ∞Ô∏è –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ: {evidence if rank in ['–°–∫–∞–º–º–µ—Ä', '–í–æ–∑–º–æ–∂–Ω–æ —Å–∫–∞–º–º–µ—Ä'] else '–ù–µ—Ç'}
–®–∞–Ω—Å —Å–∫–∞–º–∞: {chance_of_scam}%
üöÆ –°–ª–∏—Ç–æ —Å–∫–∞–º–µ—Ä–æ–≤: {slitoscammerov}
üîç –ò—Å–∫–∞–ª–∏ –≤ –±–∞–∑–µ: {iskalivbase}
üêù Stand base
            """)
    else:
        chance_of_scam = 38  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–Ω—Å —Å–∫–∞–º–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        bot.send_photo(chat_id=message.chat.id, photo='https://imageup.ru/img53/4957058/1000006423.jpg',
                       caption=f"""
–í—ã–≤–æ–∂—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
üÜî Id: –ù–µ –Ω–∞–π–¥–µ–Ω
üîÅ –†–µ–ø—É—Ç–∞—Ü–∏—è: –ù–µ—Ç—É –≤ –±–∞–∑–µ
–®–∞–Ω—Å —Å–∫–∞–º–∞: {chance_of_scam}%
üöÆ –°–ª–∏—Ç–æ —Å–∫–∞–º–µ—Ä–æ–≤: 0
üîç –ò—Å–∫–∞–ª–∏ –≤ –±–∞–∑–µ: 0
üêù Stand base
        """)

@bot.message_handler(commands=['—á–µ–∫–º–∏'])
def check_me_handler(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    if user_data:
        check_handler(message)
    else:
        chance_of_scam = 38  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–Ω—Å —Å–∫–∞–º–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        bot.send_photo(chat_id=message.chat.id, photo='https://imageup.ru/img53/4957058/1000006423.jpg',
                       caption=f"""
–í—ã–≤–æ–∂—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å:
üÜî Id: –ù–µ –Ω–∞–π–¥–µ–Ω
üîÅ –†–µ–ø—É—Ç–∞—Ü–∏—è: –ù–µ—Ç—É –≤ –±–∞–∑–µ
–®–∞–Ω—Å —Å–∫–∞–º–∞: {chance_of_scam}%
üöÆ –°–ª–∏—Ç–æ —Å–∫–∞–º–µ—Ä–æ–≤: 0
üîç –ò—Å–∫–∞–ª–∏ –≤ –±–∞–∑–µ: 0
üêù Stand base
        """)

@bot.message_handler(commands=['–º—É—Ç'])
def mute_handler(message):
    parts = message.text.split()
    if len(parts) != 3:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–º—É—Ç (id –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º) (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö)")
        return
    user_data = get_user_data(parts[1])
    if user_data:
        user_id = user_data[0]
        duration = int(parts[2])
        set_mute(user_id, duration)
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {parts[1]} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration} –º–∏–Ω—É—Ç.")
    else:
        bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(commands=['–¥–µ–ª–º—É—Ç'])
def del_mute_handler(message):
    parts = message.text.split()
    if len(parts) != 5:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–¥–µ–ª–º—É—Ç (id –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º) (–∫–æ–ª-–≤–æ) (–ø—Ä–∏—á–∏–Ω–∞) (–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö)")
        return
    user_data = get_user_data(parts[1])
    if user_data:
        user_id = user_data[0]
        count = int(parts[2])
        reason = parts[3]
        duration = int(parts[4])
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º—É—Ç –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        set_mute(user_id, duration)
        delete_messages(message.chat.id, user_id, count)
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {parts[1]} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration} –º–∏–Ω—É—Ç. –£–¥–∞–ª–µ–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π. –ü—Ä–∏—á–∏–Ω–∞: {reason}.")
    else:
        bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(commands=['–±–∞–Ω'])
def ban_handler(message):
    parts = message.text.split()
    if len(parts) != 3:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–±–∞–Ω (id –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º) (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö)")
        return
    user_data = get_user_data(parts[1])
    if user_data:
        user_id = user_data[0]
        duration = int(parts[2])
        set_ban(user_id, duration)
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {parts[1]} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {duration} –º–∏–Ω—É—Ç.")
    else:
        bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(commands=['–¥–µ–ª–±–∞–Ω'])
def del_ban_handler(message):
    parts = message.text.split()
    if len(parts) != 5:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–¥–µ–ª–±–∞–Ω (id –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º) (–∫–æ–ª-–≤–æ) (–ø—Ä–∏—á–∏–Ω–∞) (–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö)")
        return
    user_data = get_user_data(parts[1])
    if user_data:
        user_id = user_data[0]
        count = int(parts[2])
        reason = parts[3]
        duration = int(parts[4])
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–Ω –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        set_ban(user_id, duration)
        delete_messages(message.chat.id, user_id, count)
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {parts[1]} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {duration} –º–∏–Ω—É—Ç. –£–¥–∞–ª–µ–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π. –ü—Ä–∏—á–∏–Ω–∞: {reason}.")
    else:
        bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(commands=['—Å–∫–∞–º'])
def scam_handler(message):
    parts = message.text.split()
    if len(parts) != 5:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /—Å–∫–∞–º (id) (—Ä–µ–ø—É—Ç–∞—Ü–∏—è) (–ø—Ä–∏—á–∏–Ω–∞) (–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ)")
        return
    user_data = get_user_data(parts[1])
    if user_data:
        user_id = user_data[0]
        rank = parts[2]
        reason = parts[3]
        evidence = parts[4]
        add_scammer(user_id, rank, reason, evidence)
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {parts[1]} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∫–∞–º–º–µ—Ä—ã. –†–µ–ø—É—Ç–∞—Ü–∏—è: {rank}. –ü—Ä–∏—á–∏–Ω–∞: {reason}. –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {evidence}")
    else:
        bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(commands=['–Ω–µ—Å–∫–∞–º'])
def unscam_handler(message):
    parts = message.text.split()
    if len(parts) != 2:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–Ω–µ—Å–∫–∞–º (id –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º)")
        return
    user_data = get_user_data(parts[1])
    if user_data:
        user_id = user_data[0]
        remove_scammer(user_id)
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {parts[1]} —É–±—Ä–∞–Ω –∏–∑ —Å–∫–∞–º–º–µ—Ä–æ–≤.")
    else:
        bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(commands=['—Ä–∞–Ω–≥'])
def set_rank_handler(message):
    parts = message.text.split()
    if len(parts) != 3:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /—Ä–∞–Ω–≥ (id –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º) (–Ω–æ–≤—ã–π —Ä–∞–Ω–≥)")
        return
    user_data = get_user_data(parts[1])
    if user_data:
        user_id = user_data[0]
        new_rank = parts[2]
        set_rank(user_id, new_rank)
        bot.reply_to(message, f"–†–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {parts[1]} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_rank}.")
    else:
        bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(commands=['–∞–Ω–º—É—Ç'])
def unmute_handler(message):
    parts = message.text.split()
    if len(parts) != 2:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–∞–Ω–º—É—Ç (id –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º)")
        return
    user_data = get_user_data(parts[1])
    if user_data:
        user_id = user_data[0]
        remove_mute(user_id)
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {parts[1]} —Ä–∞–∑–º—É—á–µ–Ω.")
    else:
        bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(commands=['–∞–Ω–±–∞–Ω'])
def unban_handler(message):
    parts = message.text.split()
    if len(parts) != 2:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–∞–Ω–±–∞–Ω (id –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º)")
        return
    user_data = get_user_data(parts[1])
    if user_data:
        user_id = user_data[0]
        remove_ban(user_id)
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {parts[1]} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    else:
        bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
